open Expression
open Types

let mk_val (f : float) : float t = Val (Real f)
let mk_neg (e : float t) : float t = Unop (Real R.Neg, e)
let mk_abs (e : float t) : float t = Unop (Real R.Abs, e)
let mk_sqrt (e : float t) : float t = Unop (Real R.Sqrt, e)
let mk_ceil (e : float t) : float t = Unop (Real R.Ceil, e)
let mk_floor (e : float t) : float t = Unop (Real R.Floor, e)
let mk_add (e1 : float t) (e2 : float t) : float t = Binop (Real R.Add, e1, e2)
let mk_sub (e1 : float t) (e2 : float t) : float t = Binop (Real R.Sub, e1, e2)
let mk_mul (e1 : float t) (e2 : float t) : float t = Binop (Real R.Mul, e1, e2)
let mk_div (e1 : float t) (e2 : float t) : float t = Binop (Real R.Div, e1, e2)
let mk_min (e1 : float t) (e2 : float t) : float t = Binop (Real R.Min, e1, e2)
let mk_max (e1 : float t) (e2 : float t) : float t = Binop (Real R.Max, e1, e2)
let mk_eq (e1 : float t) (e2 : float t) : bool t = Relop (Real R.Eq, e1, e2)
let mk_ne (e1 : float t) (e2 : float t) : bool t = Relop (Real R.Ne, e1, e2)
let mk_lt (e1 : float t) (e2 : float t) : bool t = Relop (Real R.Lt, e1, e2)
let mk_le (e1 : float t) (e2 : float t) : bool t = Relop (Real R.Le, e1, e2)
let mk_gt (e1 : float t) (e2 : float t) : bool t = Relop (Real R.Gt, e1, e2)
let mk_ge (e1 : float t) (e2 : float t) : bool t = Relop (Real R.Ge, e1, e2)
let mk_to_string (e : float t) : string t = Cvtop (Real R.ToString, e)
let mk_of_string (e : string t) : float t = Cvtop (Real R.OfString, e)
let mk_of_integer (e : int t) : float t = Cvtop (Real R.ReinterpretInt, e)
let mk_to_uint32 (e : float t) : Num.t t = Cvtop (Real R.ConvertUI32, e)
